.TH lb 1 "September 2005"  "Version 1.0.0" "1.0.0"
.SH NAME
lb \- reads budget file and GnuCash cash-flow reports and merges data to standard output
.SH SYNOPSIS

.BR "lb "
.RB [ -b 
budget.csv ... ] 
.RB [ -r
report.html ... ]
.RB [ -s 
NN.NN MM.MM ... ] 
.RB [ -q ]

.SH DESCRIPTION

.B lb,
The Little Budgeting Tool for GnuCash is a command-line utility
that compares a comma-separated values budget definition with a HTML
cash-flow report from GnuCash.  It merges the two documents into a
report that shows (for each account) the budgeted amount, the actual
amount spent, and the difference between the two.

The report is generated based on settings found in your .lbrc file.
See
.BR lbrc (1)
For information on setting up this file (as well as the default
settings).

.SH "OPTIONS"
.TP 8
.BI -b " budget.csv ..."
The input budget definition files (separated by space).
.TP 8
.BI -r " report.html ..."
The input report file, a cash-flow report generated by 
.B GnuCash.
.TP 8
.BI -s " NN.NN MM.MM ..."
The scale factor to scale the budget files.  Every value in the budget
file will be multipled by this number.  The first budget corresponds
to the first scale value given, second budget - second value, etc.
This is a space separated list.
.TP 8
.BI -q
Quiet operation -- no title or version number.

.SH "BUDGET.CSV"
A budget definition file is a comma separated values file that has
your budget defined in it.  The format is pretty simple.  Comments are
lines that begin with a hash (#).  Account name on the left
(e.g. Expenses:Dining), then a comma (,), then the amount to budget
for that account (e.g. 40.00).  A very basic budget file might look
like this:

.PD 0
# budget.csv
.P
#
.P
# Monthly budget
.P
Income:Salary,1000.00
.P
Expenses:Tithe,100.00
.P
Assets:Current Assets:Savings Account,100.00
.P
Expenses:Rent,250.00
.P
Expenses:Grocery,250.00
.P
Expenses:Auto:Gas,80.00
.P
Expenses:Utilities:Electric,80.00
.P
Expenses:Misc,140.00
.PD

This file is located in the example directory.  Notice that the first
line is the income, and the sum of all the other values is exactly the
same as the income.  If you don't already know, this is good practice
in budgeting -- budget every penny.

If you wish to maintain this file with a spreadsheet application (like
OpenOffice.org or Gnumeric), watch out for:

1. Blank lines in the data.  You will end up exporting a line with
just a comma.  This confuses the program, and you'll get unexpected
results.  Prepend all blank lines with a hash(#).

2. Don't export the CSV with quotation marks (").  This is typically
the default for most spreadsheets.  If it puts quotation marks around
your account names and values, you'll get unexpected results.

Some tricks:

1. If you run 'lb -b budget.csv' it will automatically give you a
bottom-line balance.  For the example file, it will be 0.00.  This a
good check to make sure you haven't over-extended your budget.

2. If you want to run a "percentage" budget, you can do this as well.
Say that you call your income 1.00.  Then each budgeted
item will be a percentage of that.  (E.g. Expenses:Grocery,.25 for
25% going toward grocery.)  When you run the report, you can scale it
by a factor.  To show what the budget is for $2148.62 of income, run
the
report as 'lb -b budget.csv -s 2148.62'  All of the accounts will be
scaled accordingly.

3. To save the report, just redirect the output.  E.g. 'lb -b
budget.csv -r report.html > summary.txt'

.SH "REPORT"
You can't generate a report by hand.  This tool was designed to use
with GnuCash reports.  So, I'll step you through how to do this with
GnuCash 1.8.9.  Your version will no doubt be similar.

From the accounts screen (the main window when you open GnuCash),
select from the top menu Reports | Income & Expense | Cash Flow.  By
default it will give you a summary for all the account for the entire
year.  However, you probably want to get a report for last month.  Or
for a 4-week period corresponding to your paycheck.  Here's how to
tweak it for what you need.

1. Click the Options button.

2. Under the General tab, select the start and end dates for the
period you are interested in.  (E.g. From: Start of previous month,
To: End of previous month.)

3. Under the Accounts tab, select the account that you want to study.
By default, it has all the Assets accounts selected.  However, for
most personal budgeting, you may want to just select the
"Assets:Current Assets:Checking Account."  This will track everything
going into and out of that account.  To unselect the other accounts,
just click on them.

4. Click OK.

5. Click the Export button.

6. In the "Save" dialog box, give the name and location for where you
want to save the report.  It's recommended to include the .html
extension.  (E.g. report.html)

You're done.  You can run an LB report with this.

.SH "RUNNING AN LB REPORT"

From the command line, you enter:

$ lb -b budget.csv -r report.html

And you'll get a report that merges the data from each.  If you use
the budget & report from the example directory, your output will look
like this:

.PD 0
$ lb -b budget.csv -r report.html
.P
LB - The Little Budget Tool, (C)2004 by G. M. Beddingfield, Romans
11:36
.P
Beginning date: 10/01/04.
.P
Ending date:    10/31/04.
.P

.P
                              Account    Planned    Actual      Diff
.P
=====================================  ========= ========= =========
.P
                        Income:Salary    1000.00   1048.16    -48.16
.P
                                       ========= ========= =========
.P
                        Total Income:    1000.00   1048.16     48.16
.P

.P
Assets:Current Assets:Savings Account     100.00    100.00      0.00
.P
                                       ========= ========= =========
.P
                        Total Assets:     100.00    100.00      0.00
.P

.P
                    Expenses:Auto:Gas      80.00     70.20      9.80
.P
                     Expenses:Grocery     250.00    275.41    -25.41
.P
                        Expenses:Misc     140.00    136.25      3.75
.P
                        Expenses:Rent     250.00    249.00      1.00
.P
                       Expenses:Tithe     100.00    105.00     -5.00
.P
          Expenses:Utilities:Electric      80.00     74.18      5.82
.P
                                       ========= ========= =========
.P
                      Total Expenses:     900.00    910.04     10.04
.P

.P

.P
                         BOTTOM LINE:       0.00     38.12     38.12
.P

.P
$
.PD

The first two columns, you can get from your respective reports.  It's
the column on the far right that you're probably most interested in.
Negative values (e.g. -25.41 for Expenses:Grocery) mean that you've
overspent.  Positive values mean that you still have money left to
spend in that account (according to the budget).  However, some of
those accounts will have to make up for overspending on Groceries this
month.

.SH YTD

The report will also suply a set of YTD (or Year-To-Date columns).  If
you just run one budget and one report, the YTD columns will look
exactly like the regular report columns.  However, if you specify more
than one budget and/or report, it will consider the first
one 'current' and all the others 'previous'.  The 'previous' ones will
all be added up, including the current, and give you a long-term
status report.

For example:
.P
lb -b mar.csv feb.csv jan.csv -r mar.html feb.html jan.html

Will give you a report for March, and also a YTD report that sums the
values for January, February, and March.

.SH "SEE ALSO"

.BR gnucash (1),
.BR lbgui (1)

.SH AUTHOR

G. M. Beddingfield <gabriel@teuton.org>
