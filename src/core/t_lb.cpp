/***************************************************************************
 *                                                                         *
 *   LB - The Little Budget Utility for GnuCash                            *
 *                                                                         *
 *   Copyright (C) 2004,2005 by Gabriel M. Beddingfield                    *
 *   gabriel@teuton.org                                                    *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

/* t_lb.cpp
   Gabriel M. Beddingfield
   10APR2005

   Program to test the lb class to make sure that it
   works as designed.

   It will create temporary files in a beginning with:
   .testtemp_
*/


#include <iostream>
#include <fstream>
#include <cstdio>  // for remove()
#include <limits>  // for eps below
#include <cstring>  // for strcmp()
#include "../test/tester.h"
#include "lb.h"

using namespace std;
using namespace bommer;

//static const float eps = (7.0*numeric_limits<float>::epsilon());
static const float eps = 1e-4;

// Following is the test data to be used.
// The data is an exact copy of that used my t_budget.cpp
// and t_report.cpp
//
const char _rep_good_dat[] = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 TRANSITIONAL//EN\">\n"
"<HTML>\n"
"<HEAD>\n"
"  <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; CHARSET=UTF-8\">\n"
"  <META NAME=\"GENERATOR\" CONTENT=\"GtkHTML/1.1.10\">\n"
"</HEAD>\n"
"<BODY BGCOLOR=\"#ffffff\">\n"
"<BR>\n"
"<BR>\n"
"<H3>Cash Flow - 10/01/04 to 10/31/04 for</H3>\n"
"Selected Accounts <BR>\n"
"<TABLE CELLSPACING=\"4\" CELLPADDING=\"0\">\n"
"<TR>\n"
"<TD COLSPAN=\"2\">\n"
"\n"
"<HR>\n"
"\n"
"</TD>\n"
"</TR>\n"
"<TR>\n"
"<TD BGCOLOR=\"#ffffff\">\n"
"Money into selected accounts comes from\n"
"</TD>\n"
"<TD BGCOLOR=\"#ffffff\">\n"
"<BR>\n"
"</TD>\n"
"</TR>\n"
"<TR>\n"
"<TD>\n"
"<A HREF=\"gnc-register:guid=21067b1be2655b3094b8241ff7ec3129\">Income:Salary</A>\n"
"</TD>\n"
"<TD NOWRAP ALIGN=\"right\">\n"
"$1,048.16\n"
"</TD>\n"
"</TR>\n"
"<TR>\n"
"<TD BGCOLOR=\"#ffffff\">\n"
"Money In\n"
"</TD>\n"
"<TD BGCOLOR=\"#ffffff\" ALIGN=\"right\">\n"
"<FONT SIZE=\"3\"><B>$1,048.16</B></FONT>\n"
"</TD>\n"
"</TR>\n"
"<TR>\n"
"<TD COLSPAN=\"2\">\n"
"\n"
"<HR>\n"
"\n"
"</TD>\n"
"</TR>\n"
"<TR>\n"
"<TD BGCOLOR=\"#ffffff\">\n"
"Money out of selected accounts goes to\n"
"</TD>\n"
"<TD BGCOLOR=\"#ffffff\">\n"
"<BR>\n"
"</TD>\n"
"</TR>\n"
"<TR>\n"
"<TD>\n"
"<A HREF=\"gnc-register:guid=2ee57ccdf3f8bb2528f44e630872632a\">Expenses:Tithe</A>\n"
"</TD>\n"
"<TD NOWRAP ALIGN=\"right\">\n"
"$105.00\n"
"</TD>\n"
"</TR>\n"
"<TR>\n"
"<TD BGCOLOR=\"#ffffff\">\n"
"<A HREF=\"gnc-register:guid=208b0c9604a53f008a36d50787bd0855\">Assets:Current Assets:Savings Account</A>\n"
"</TD>\n"
"<TD BGCOLOR=\"#ffffff\" NOWRAP ALIGN=\"right\">\n"
"$100.00\n"
"</TD>\n"
"</TR>\n"
"<TR>\n"
"<TD>\n"
"<A HREF=\"gnc-register:guid=12130c7eb8b225b5c1bb182c17ebb82e\">Expenses:Grocery</A>\n"
"</TD>\n"
"<TD NOWRAP ALIGN=\"right\">\n"
"$275.41\n"
"</TD>\n"
"</TR>\n"
"<TR>\n"
"<TD BGCOLOR=\"#ffffff\">\n"
"<A HREF=\"gnc-register:guid=16cc45ab4ae8e4fd89a89ab33584aae7\">Expenses:Misc</A>\n"
"</TD>\n"
"<TD BGCOLOR=\"#ffffff\" NOWRAP ALIGN=\"right\">\n"
"$136.25\n"
"</TD>\n"
"</TR>\n"
"<TR>\n"
"<TD>\n"
"<A HREF=\"gnc-register:guid=2e15eddfea96829db0ed2032d6a82409\">Expenses:Rent</A>\n"
"</TD>\n"
"<TD NOWRAP ALIGN=\"right\">\n"
"$249.00\n"
"</TD>\n"
"</TR>\n"
"<TR>\n"
"<TD BGCOLOR=\"#ffffff\">\n"
"<A HREF=\"gnc-register:guid=2af59edc052fb5964f0c3bb354b2a6e2\">Expenses:Utilities:Electric</A>\n"
"</TD>\n"
"<TD BGCOLOR=\"#ffffff\" NOWRAP ALIGN=\"right\">\n"
"$74.18\n"
"</TD>\n"
"</TR>\n"
"<TR>\n"
"<TD>\n"
"<A HREF=\"gnc-register:guid=00b89784822331e28b60eeabea4e6156\">Expenses:Auto:Gas</A>\n"
"</TD>\n"
"<TD NOWRAP ALIGN=\"right\">\n"
"$70.20\n"
"</TD>\n"
"</TR>\n"
"<TD BGCOLOR=\"#ffffff\">\n"
"Money Out\n"
"</TD>\n"
"<TD BGCOLOR=\"#ffffff\" ALIGN=\"right\">\n"
"<FONT SIZE=\"3\"><B>$1,010.04</B></FONT>\n"
"</TD>\n"
"</TR>\n"
"<TR>\n"
"<TD COLSPAN=\"2\">\n"
"\n"
"<HR>\n"
"\n"
"</TD>\n"
"</TR>\n"
"<TR>\n"
"<TD BGCOLOR=\"#ffffff\">\n"
"Difference\n"
"</TD>\n"
"<TD BGCOLOR=\"#ffffff\" ALIGN=\"right\">\n"
"<FONT SIZE=\"3\"><B>$38.12</B></FONT>\n"
"</TD>\n"
"</TR>\n"
"</TABLE>\n"
"\n"
"</BODY>\n"
"</HTML>\n";

// Random data generated from /dev/urandom
// Omitted null '\x000' characters from the output.

const char _rep_bad_dat[] = 
"\xdc\xaa\x9a\xba\xfe\xc5\xe9\xb4\xe4\x4d\x70\x9c\x13\xef\x2f\x21\n"
"\xa5\x35\x01\xee\xd2\x1e\x37\x33\x5e\xe2\x55\x4f\x7c\x54\x27\x4e\n"
"\x34\x2b\xe5\x82\x83\x8a\xab\x68\xe3\xc8\x9b\x4b\x42\x7c\x2c\x2e\n"
"\x29\x8b\x33\x77\xd7\x17\x02\x2d\xe9\x63\x9c\xde\xa0\xfb\xc7\x9e\n"
"\xe4\x34\x3f\xd5\xfa\x9d\x79\xd9\x06\xcf\x5b\x90\x51\x9a\x89\x6a\n"
"\x7d\x9d\x4e\xbc\x5b\xde\x5d\x13\xf5\x79\xaa\xc3\x11\x6c\xb9\xf9\n"
"\x0d\x65\xc5\xac\x66\xaa\x59\xc3\x98\x7b\x0e\x73\xf0\xd5\x11\xbc\n"
"\x38\x28\xd2\xd7\x39\x49\xe1\xec\x16\x03\x37\xb0\x05\xd4\x6d\x33\n"
"\x22\x59\xea\xe9\x1d\xe6\x24\xbd\x40\x37\xf0\x01\x4e\xe7\x6e\x46\n"
"\x0d\x85\x8e\xde\x06\xdb\xaa\xb9\xa3\xdf\x56\x34\x3d\x64\x5b\x1c\n"
"\x71\x44\x70\x04\x45\x0f\x99\xb6\x5a\xc4\xb7\x6f\x23\xaf\x8b\x64\n"
"\x4f\xcc\x27\xa2\xba\x40\xaa\x62\x87\x57\xdb\x4f\x49\xf1\x46\x5c\n"
"\x73\xb2\x45\x50\xb2\x17\xd4\xb4\xce\xcf\x2d\xe8\xeb\x76\xee\x0f\n"
"\x35\x6d\x9d\x70\xe3\x96\xb2\xb4\x33\xb7\xb5\x33\xcd\x83\x4d\xee\n"
"\x3f\xfc\x92\xfb\x54\xc1\x21\x60\xc6\x65\x90\x78\x7e\x93\x34\x70\n"
"\x0a\xf0\x52\xf8\x62\xad\xd7\x36\x48\xdc\xcd\x27\xa5\x92\xe2\x35\n"
"\xfa\x9f\x14\x0d\xcd\xc1\xa8\x7a\x2a\x24\xe8\x81\xe4\x0a\xad\x66\n"
"\xd0\x70\xdd\x3f\x21\xc2\x9d\x3a\x0e\x69\xe7\x9d\x01\x71\xb0\xa1\n"
"\x2d\x70\xb6\x29\x2f\x9f\xee\x36\x1b\x7e\x4e\x91\x1a\x07\xc2\xe3\n"
"\x21\x8c\x34\x92\xb9\x1d\x5c\xb5\x9a\xdf\x28\x03\xb5\xbf\x4e\xfa\n"
"\x8f\x31\x42\x41\xb1\x36\xfc\x0c\x83\x20\x98\x11\x63\x98\x37\xb4\n"
"\x2b\x61\x42\x3c\xdd\xa8\xb2\xa9\xe1\xb0\x27\x88\xbf\xe6\x7d\xaf\n"
"\xb0\x3b\xc1\x1f\x5c\xa7\xbf\xc7\x58\xcf\x94\x06\x4b\xc6\x7a\x9f\n"
"\x57\xbb\xfa\x88\xa8\xaa\x52\x64\x35\xc2\x37\x82\x4d\x41\x73\xc2\n"
"\x14\x37\x38\xb2\x9e\x68\xb2\xf9\xc2\x4d\x6c\x28\xaf\xed\xa3\xae\n"
"\x3a\x48\xa0\xed\x24\x08\x85\x88\x8e\xde\xc7\x62\xc9\x54\x7d\xec\n"
"\xb0\x7d\x28\x2c\xe0\x1d\x0c\x3c\x75\xdd\x5e\xec\x2d\xde\x54\x7b\n"
"\x21\x93\x71\xcf\xf8\xaf\xcd\x3e\x64\xdc\x7b\xb1\xa5\x97\x24\xe6\n"
"\x8d\xab\x0a\xf6\xc5\x83\x96\xd2\x3e\x0d\x04\x8b\x63\x5b\x34\x87\n"
"\xa8\x42\x8b\xd6\xc5\x93\x8e\xa4\xf4\xc3\xc9\x49\x4c\xb0\x47\x5c\n"
"\xa3\x33\xc5\xf6\x7e\x47\x2c\x30\xd8\xd4\xa3\xce\xac\x04\x02\x4f\n"
"\xaf\x4e\x9e\x24\xcd\xdc\x11\x32\xc8\xbc\xc9\xde\x52\x82\x16\x44\n"
"\xd5\x9a\xc5\x58\x5d\x51\x0e\x50\xd8\x8f\x05\x24\x9b\xc5\x48\xdb\n"
"\x40\x42\x66\xc7\x1a\x13\x71\x52\x71\x4c\xa4\xeb\x85\x29\x69\x17\n"
"\x2e\x99\xf6\xec\x85\xf3\x18\x0b\xa4\x21\x04\x85\x50\xcf\xfd\x92\n"
"\x0d\x4e\x0a\xdd\xb2\x8b\x2c\xfe\x33\x7f\x08\xe4\x21\x0f\x8c\x7c\n"
"\xd0\x35\xe8\x6b\x2a\x56\xa5\x62\x8d\xbe\xd5\xbc\x8a\xe4\xed\xc1\n"
"\x69\xb9\x77\x5f\x66\xdb\xb9\x2e\x2e\xea\xdc\x14\xa6\xb9\xc3\xd2\n"
"\x4d\xf8\x92\x8f\xed\xf6\x0b\x5e\x3d\xc6\xa8\x3c\x3d\xe9\xa1\x4e\n"
"\x68\x2a\x23\x09\xd6\x5c\x72\x36\xce\xc4\x39\x57\x0e\x23\x25\x39\n"
"\xaf\xc3\x67\x25\x04\x57\x33\x3f\xf0\x46\x2e\xd1\x1c\x0a\xfb\x41\n"
"\xaa\x65\x2d\xb7\x2a\x86\x5b\xc2\xff\x93\x54\xba\xc2\x9b\xd5\xac\n"
"\x8e\xd3\xb8\xad\x62\x9b\x17\x1d\x19\x5b\xb1\xc6\x6c\x03\x53\x5c\n"
"\x9b\x3c\x02\x82\x1f\x45\x6b\xa9\x1c\x19\xf7\x9b\x81\xd8\x85\xf1\n"
"\xd3\x30\xfe\x62\x09\x03\x98\xaf\x8b\x56\x92\xb2\x6e\x82\x09\x6c\n"
"\xf1\xfc\x12\x96\xa3\x71\xe9\xbd\xfe\x30\xc1\xaf\xb8\xe8\x26\xf0\n"
"\x4b\xca\x1c\x35\x7d\xf6\x14\xa1\xff\x79\x5f\x44\x37\x3a\x9a\xe7\n"
"\xf0\x9e\xe0\xbd\x41\x57\xbd\x35\x8a\xe2\xf0\x38\x61\xa6\x39\xbc\n"
"\xc8\x97\xd5\x9a\x8e\xfa\x93\xce\x34\x99\xc7\x93\x84\x2f\xd2\x85\n"
"\x41\xe4\x6d\xb6\xdb\x03\xb3\x25\x1f\x6b\xc1\xbb\x94\xe1\x4a\x0d\n"
"\x96\xc9\x29\xa5\x97\x49\x36\x20\x31\x99\x4a\xf1\xe9\xd6\x0c\xc0\n"
"\xab\xc4\x3a\x6b\xc0\x57\x17\xe9\x42\x8a\x6f\xbc\x02\x22\x40\x19\n"
"\x97\xe4\xfa\x3f\x3a\x86\x3e\xa4\x73\x17\xa2\x6d\xca\xbb\xc9\xdc\n"
"\xf6\x53\x36\x18\x12\xdf\xa8\x6e\x12\x09\x63\x85\x4a\x68\xb5\x6e\n"
"\x93\xce\x3f\x90\x53\xa8\xd1\x2b\x7c\xcc\x1d\x57\x91\x9b\xf9\xeb\n"
"\xd0\x25\x09\x91\xd9\xe0\x98\x33\x90\xe7\xef\x4b\x4c\xb2\x19\x01\n"
"\xdc\xdf\xcc\x8d\xcb\x1b\x1c\x19\x80\x60\xaf\xae\x98\x1b\x30\xeb\n"
"\xd7\xdf\xb3\xd0\x16\xdb\x60\x91\x2c\x04\x49\xce\x2e\xf5\x81\x18\n"
"\xfa\xb1\x4f\x83\x54\x0b\xd0\x08\x6e\x5a\xc8\xb9\x51\x16\x62\x47\n"
"\xac\xc1\x80\x7e\x8b\x54\x6e\xee\x37\x45\xc3\x48\x5b\xc0\xb3\x26\n"
"\xde\x09\x22\x5f\xe4\x87\xdb\x88\xe4\x81\xa5\x78\xae\x25\x7e\xc0\n"
"\xab\xf5\x2f\xb1\xdd\xa8\xe1\x13\x7d\xd7\x8a\x38\x45\xdd\x2b\xd9\n"
"\x4d\x73\x42\xc2\x13\xc0\x99\x08\x67\x27\x8c\xa8\xf8\xcf\xd3\x78\n"
"\xb0\x27\xac\xc7\x35\xa5\x8f\xd6\x58\x49\x88\x03\xb7\xc9\x79\xcc\n"
"\x25\xa8\x35\xd6\xd2\x7c\x66\xeb\x1c\x49\x9d\x1e\x39\x8a\x6e\x0a\n"
"\xb3\x01\xb9\xdd\xdd\x2d\x5c\x97\x6d\x4a\xba\x70\x25\xed\xe2\x85\n"
"\xc7\xcf\x28\x38\xe8\x9a\x2a\xfd\x41\xea\xf0\x2f\xb2\xb1\xc0\x9c\n"
"\x8c\xb1\xd7\x9d\x73\xf6\xbc\x3c\xf6\x71\xd0\xb0\x5f\x21\x19\xff\n"
"\x63\x74\x99\xa2\xb9\xaf\xff\x1a\xaf\x43\x99\x51\x3d\x47\x4c\x54\n"
"\xca\xb8\x89\x83\x38\xcd\x8b\xc6\x24\x0e\xd2\x46\x26\x29\x7d\xbf\n"
"\x60\xa6\x44\xc2\x9d\x5e\x41\x99\xa3\x52\x40\x6e\x21\x5c\xc5\x5f\n"
"\xf8\x9b\xbe\x03\xa3\x81\x7e\xae\x44\x4b\xc3\xef\xe9\x0b\xc5\xad\n"
"\x35\xda\x9e\x33\x74\x9f\xc4\x4f\xf5\xf0\xd5\x43\x69\x53\x28\x64\n"
"\xbe\xcd\x44\x40\x8d\x95\x59\x92\xb4\xae\x35\xc5\xa2\xfb\x93\x17\n"
"\x64\x68\xf7\xb6\x94\x42\x74\x28\x84\x9e\x0b\xf6\x8a\x80\x9c\x8e\n"
"\x7d\x83\x91\xb7\x2f\x98\x9c\xd1\xdf\xb8\x61\xc1\x63\x4f\xea\x6f\n"
"\x48\x91\x14\xd6\x92\x67\x37\x34\x65\x75\x66\x6a\x01\x6c\x05\x87\n"
"\x08\xf7\x0c\xac\xc7\x12\xcb\xf0\xac\x78\x61\xbe\xa8\x19\x4b\xd8\n"
"\x7a\xe4\x3f\x94\x5e\x21\x31\xa1\x9c\xdd\xec\xed\x1f\x67\xfd\xa6\n"
"\x16\x54\xcf\xde\x35\x18\x5e\x36\xd3\x98\xb8\x17\x61\x4a\xfe\xda\n"
"\xbf\x65\x0d\x47\xb0\x34\x0c\xed\x0d\xa2\x99\x89\xd6\xd1\x2c\x83\n"
"\x66\x2d\xe4\xdc\x58\xed\x5d\x1b\xd3\x8e\x94\xb0\x2f\x04\xd5\xf7\n"
"\x01\xe2\x84\xed\xeb\xb5\x29\x2b\xa2\x8a\x46\x60\x21\x78\xe6\xee\n"
"\x60\x60\x29\x43\x8f\x98\x12\x48\x03\x69\x04\x07\x49\x1b\xa0\xa9\n"
"\xd1\x3f\xb4\x0b\x44\x77\xf7\x5b\x84\x39\x39\xe0\xd2\x7a\xeb\x05\n"
"\x42\xa2\xb2\x51\xe6\xd8\x6c\x49\x71\x20\xcc\x64\x0a\x9d\xb4\x0f\n"
"\xd4\x3e\x39\xf5\x07\xae\x7a\x29\x75\x48\x56\x61\x46\x0d\x22\xd4\n"
"\x8a\x31\xdb\x84\xb7\xd1\x44\x5d\x95\x02\xe0\x45\x2a\x0c\xc0\x04\n"
"\x83\x82\x58\xce\x8f\x07\x0a\x4c\xe3\x02\x74\x06\xc8\xdf\xf4\xf5\n"
"\x49\xb2\x65\x4b\x79\x22\x8f\xe0\x8e\x97\xa6\x29\x49\x87\x2f\x03\n"
"\x4c\x27\x25\x3a\x56\x8d\x40\xc7\x5f\x53\x05\x64\xed\x2c\xa8\xdc\n"
"\x53\x4a\xd8\x91\xf0\xae\xc3\xad\x78\x57\xba\x87\xcf\x13\x02\xec\n"
"\x19\xf2\xc9\x16\x77\xd8\xcd\xa6\xc9\xea\xcb\xe6\x86\x72\x0d\x5d\n"
"\xb3\xa6\x60\xe7\x63\x1c\x76\xa0\x4d\xbb\x1c\x48\x37\x7a\x06\x4f\n"
"\xcb\x15\x32\x01\x4c\xa5\x27\x5d\x15\xb4\x56\xff\xb4\x0e\x10\x2f\n"
"\x30\x1d\x0a\x3a\x23\xe7\x58\x08\x1b\x63\x84\xb0\xea\xc2\x23\x0e\n"
"\xc3\x2b\x61\x1f\x75\x68\x53\x75\xce\x54\x3b\xf0\xa8\xd5\x8c\xee\n"
"\xe5\x48\x9a\x23\x48\x6a\x78\x9f\x1d\x36\xcf\xa0\x56\x0a\xf1\xf9\n"
"\x62\x81\x47\x85\x04\x57\x7d\x59\xb6\xe3\x01\x30\x3d\x52\xb3\xe7\n"
"\x93\x3d\xd2\xda\xeb\xce\xdf\x19\x1d\xe0\xde\x3b\x0f\x46\x46\x0a\n"
"\xcb\x91\x4e\x5d\x9a\x17\x80\x09\x8b\xae\xd9\x22\xa2\xaf\xbf\xf7\n"
"\x02\xdf\x32\x2b\x97\x6f\x6e\x44\xc8\x09\x9a\x45\x5e\x11\xdb\x41\n"
"\xc4\x4d\x8f\x60\xba\x8d\x5c\xa7\x43\x99\xc9\x3b\x50\xc9\xb2\x7f\n"
"\x94\xa0\x04\x30\xc7\x0a\xd9\x1b\xa5\xa1\x67\x78\xd5\xee\xa6\x0d\n"
"\xa2\xe9\x22\x89\x4b\xba\x4b\xc6\x7f\xdf\xd8\x8c\x12\x89\xac\x5e\n"
"\x37\xe6\xd0\x72\xd5\x93\xff\x25\x6a\x18\x2e\x67\x20\x5f\x58\xbc\n"
"\x30\x2f\x2a\x33\x8c\x89\x6f\x0b\x1a\x15\x61\x0b\x8d\x1a\x2d\xf2\n"
"\x10\xf4\xb6\xb1\xf0\x62\xcc\xfc\xc8\x3e\xa2\x58\xc5\x24\x9b\x12\n"
"\xca\x97\xc1\xb1\x66\x76\x7e\xeb\x99\xcf\xd8\xf1\x66\xc2\xeb\x2b\n"
"\x31\xe6\x4c\x81\x67\x31\xb9\xbe\x23\xcf\x09\x58\x99\x85\xe4\xf8\n"
"\x7a\xbc\xf6\x07\x88\xbe\xaa\x17\x23\x27\xef\x25\x9d\x85\x8f\x8f\n"
"\xf2\x69\x3a\xf7\x22\xf5\x14\x38\x70\xeb\x93\xd8\x83\x56\x81\xdd\n"
"\x97\x17\xf8\x15\x82\x89\xf7\x88\xfe\xde\x1a\x44\x6e\xe9\x45\x04\n"
"\xdb\xb1\x9b\x8e\xb4\xe6\xe1\x03\xb8\xbc\x50\x96\xf9\xd0\xdd\xfb\n"
"\xd5\x1d\x63\x73\x55\x8d\x76\xe5\x7e\x38\x7e\x8a\xe0\x38\xdd\x35\n"
"\x3d\xdd\xe5\x17\xbc\x3e\xfb\x51\x3a\x6f\x7b\x59\x2b\x25\xe1\xbd\n"
"\x3c\x71\x66\xe4\xdc\x64\x09\xa1\xaf\xa2\x23\x93\x99\xc1\x63\x6a\n"
"\x8d\xbc\xdf\x63\x7c\x7c\xc3\xaa\x6a\x77\x39\x3e\xf7\x1a\x3c\x57\n"
"\x1c\xd1\x7f\x43\xff\x0b\x7b\xfe\x52\x27\x0e\xc2\x7f\x37\xcf\xc3\n"
"\x34\xf7\xf5\xdc\x9e\xfa\x4b\x63\x4c\x07\x1f\xbb\xe3\x55\xe8\xa5\n"
"\x99\x68\xfe\x1b\xe7\xae\xcf\x7c\x90\xb5\x6d\x15\x59\xe8\xab\x73\n"
"\x7e\xe4\x6a\xbe\x2a\xac\xb0\xad\x27\x2c\xaa\x82\x1b\xb5\x94\x49\n"
"\xb7\x62\xfc\xe2\xd2\x03\x2c\x46\xac\x65\x01\x28\x35\xef\x22\x05\n"
"\x1a\x3e\x64\x5f\xbe\x3e\xa0\x7d\xe8\x24\xea\x01\x32\x1a\x91\xc6\n"
"\x05\x6f\x0d\xe9\x79\xca\x8a\x2c\x96\xe9\x72\x0e\x2a\x66\xda\x43\n"
"\x7a\xfd\xc2\x8d\xe0\x2b\x9e\x3c\x04\x6d\xda\xd0\xec\xc6\x73\xf0\n"
"\xcc\xa8\x5b\xf2\xf9\x46\x0e\xfd\x5e\x4b\x54\x45\x2b\xe8\x51\x02\n"
"\xf3\x30\xc7\x41\x43\x7f\x46\n";

const char _bud_good_dat[] = "# budget.csv\n"
"#\n"
"# Monthly budget\n"
"Income:Salary,1000.00\n"
"Expenses:Tithe,100.00\n"
"Assets:Current Assets:Savings Account,100.00\n"
"Expenses:Rent,250.00\n"
"Expenses:Grocery,250.00\n"
"Expenses:Auto:Gas,80.00\n"
"Expenses:Utilities:Electric,80.00\n"
"Expenses:Misc,140.00\n\n";

const char _bud_bad_dat[] = "<html><!-- Blah:Blah,wAAAh>\n"
"<head>\n"
"  <title>My Home Page.\n"
"</head>\n"
"<body>\n"
"<H3>Hello, World!!</H3>\n"
"</body>\n"
"</html>\n\n";



class TestLb : public Tester
{

protected:
	void constructors(void);
	void methods(void);
	void operators(void);

public:
	TestLb(void) { }
	~TestLb() { }

	int run(void);
};


int main(void)
{
	try {
		TestLb t;

		return t.run();
	} catch (TestErr e) {
		cout << e.what() << endl;
		return EXIT_FAILURE;
	} catch (...) {
		cout << "Unhandled exception in "
		     << __FILE__ << endl;
		return EXIT_FAILURE;
	}

	return EXIT_FAILURE; // Never reach here
}

int TestLb::run(void)
{

	constructors();
	methods();
	operators();

	cout << Report() << endl;

	return verdict();
}

void TestLb::constructors(void)
{
	// Test default constructor
	lb *t = new lb;
	string s1, s2;
	stringstream os;

	t->run(os);
	s2 = t->about() + string("\n\n") + t->usage()
		+ string("\n");
	Test( os.str() == s2 , __Tester__ );
	Test( t->good() == false , __Tester__ );
	Test( t->bad() == true , __Tester__ );
	Test( t->quiet() == false, __Tester__ );

	delete t;

	// Now, we'll test 9 permutations of data
	// Hmmm... do I really want to do this?

	return;
}

void TestLb::methods(void)
{
	// all was tested in constructors
	return;
}

void TestLb::operators(void)
{
	// all was tested in constructors
	return;
}
